{
    "version": 3,
    "sources": [
        "../../../src/common/bootstrap/global.js"
    ],
    "names": [],
    "mappings": "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",
    "file": "../../../src/common/bootstrap/global.js",
    "sourcesContent": [
        "/**\n * this file will be loaded before server started\n * you can define global functions used in controllers, models, templates\n */\n\n/**\n * use global.xxx to define global functions\n * \n * global.fn1 = function(){\n *     \n * }\n */\nvar crypto = require(\"crypto\");\nvar fs = require(\"fs\");\nvar path = require(\"path\");\n\nglobal.encrypt = function(str1, str2, type = \"hex\") {\n  str1 = typeof str1 === \"string\" ? str1 : str1.toString();\n  str2 = typeof str2 === \"string\" ? str2 : str2.toString();\n  if (str1 > str2) {\n    [str1, str2] = [str2, str1];\n  }\n  var sha1 = crypto.createHash(\"sha1\");\n  sha1.update(str1);\n  sha1.update(str2);\n  return sha1.digest(type);\n};\n\nglobal.savelog = function(str1, str2, data) {\n  str2 = str1 == \"group\" ? \"\" : str2;\n  data = typeof data == \"string\" ? data : JSON.stringify(data);\n  var name = encrypt(str1, str2);\n  var chatlog_dir = path.join(think.ROOT_PATH, \"www/static/tmp/chatlog\");\n  var filename = path.join(chatlog_dir, name + \".json\");\n  if (!fs.existsSync(chatlog_dir)) {\n    fs.mkdirSync(chatlog_dir, \"0777\");\n  } \n  if (data) {\n    fs.appendFileSync(filename, data + \",\", \"utf8\", \"a+\");\n  }\n}\n\nglobal.getlog = async function(str1, str2) {\n  str2 = str1 == \"group\" ? \"\" : str2;\n  return new Promise((resolve, reject) => {\n    var name = encrypt(str1, str2);\n    var filename = path.join(think.ROOT_PATH, \"www/static/tmp/chatlog\", name + \".json\");\n    fs.readFile(filename, function(err, data) {\n      if (err) {\n        resolve([]);\n      } else {\n        data = \"[\" + data.toString(\"utf8\").slice(0, -1) + \"]\";\n        data = parseJson(data);\n        resolve(data);\n      }\n    });\n  });\n}\n\nglobal.parseJson = function(str) {\n  try {\n    var data = JSON.parse(str);\n  } catch (e) {\n    var data = null;\n  }\n  return data;\n}\n\nglobal.formatTime = function(date, fmt = \"M月dd日 hh:mm\") {\n  var o = {   \n    \"M+\" : date.getMonth()+1,                 //月份   \n    \"d+\" : date.getDate(),                    //日   \n    \"h+\" : date.getHours(),                   //小时   \n    \"m+\" : date.getMinutes(),                 //分   \n    \"s+\" : date.getSeconds(),                 //秒   \n    \"q+\" : Math.floor((date.getMonth()+3)/3), //季度   \n    \"S\"  : date.getMilliseconds()             //毫秒   \n  };   \n  if(/(y+)/.test(fmt))   \n    fmt=fmt.replace(RegExp.$1, (date.getFullYear()+\"\").substr(4 - RegExp.$1.length));   \n  for(var k in o)   \n    if(new RegExp(\"(\"+ k +\")\").test(fmt))   \n  fmt = fmt.replace(RegExp.$1, (RegExp.$1.length==1) ? (o[k]) : ((\"00\"+ o[k]).substr((\"\"+ o[k]).length)));   \n  return fmt;   \n};\n\nglobal.savePhoto = async function(filename, uid) {\n  return new Promise(function(resolve, reject) {\n    try {\n      uid = typeof uid == \"string\" ? uid : uid.toString();\n      var sha1 = crypto.createHash(\"sha1\");\n      sha1.update(uid);\n      var str = sha1.digest('hex');\n      var extname = path.extname(filename);\n      var filepath = path.join(think.ROOT_PATH, \"www/static/tmp/photo\", str + extname);\n      var rs = fs.createReadStream(filename);\n      var ws = fs.createWriteStream(filepath);\n      rs.on(\"data\", function(chunk) {\n        if (ws.write(chunk) == false) {\n          rs.pause();\n        }\n      });\n      ws.on(\"drain\", function() {\n        rs.resume()\n      });\n      rs.on(\"end\", function() {\n        ws.end();\n        resolve(`/static/tmp/photo/${str}${extname}`);\n      });\n    } catch (e) {\n      resolve(null);\n    }\n  }); \n};\n"
    ]
}