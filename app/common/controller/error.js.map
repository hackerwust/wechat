{
    "version": 3,
    "sources": [
        "../../../src/common/controller/error.js"
    ],
    "names": [],
    "mappings": "AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mBAUE,Y,yBAAa,M,EAAO;AAAA;;;AAGlB,QAAG,MAAM,GAAN,KAAc,YAAjB,EAA8B;AAC5B,WAAK,IAAL,CAAU,KAAV,GAAkB,IAAlB;AACD;;AAED,QAAI,cAAc,KAAK,MAAL,CAAY,OAAZ,CAAlB;AACA,QAAI,UAAU,KAAK,IAAL,CAAU,KAAV,IAAmB,KAAK,IAAL,CAAU,KAAV,CAAgB,OAAnC,IAA8C,EAA5D;AACA,QAAG,KAAK,OAAL,EAAH,EAAkB;AAAA;;AAChB,aAAO,KAAK,KAAL,sBACJ,YAAY,GADR,IACc,MADd,SAEJ,YAAY,GAFR,IAEc,OAFd,UAAP;AAID,KALD,MAKM,IAAG,KAAK,MAAL,EAAH,EAAiB;AACrB,aAAO,KAAK,IAAL,CAAU,MAAV,EAAkB,OAAlB,CAAP;AACD;;AAED,QAAI,SAAS,QAAb;AACA,QAAG,MAAM,IAAN,KAAe,MAAM,WAAxB,EAAoC;AAClC,eAAS,KAAK,MAAL,CAAY,gBAAZ,CAAT;AACD;AACD,QAAI,OAAU,MAAV,eAA0B,MAA1B,UAAJ;AACA,QAAI,UAAU,KAAK,MAAL,CAAY,KAAZ,CAAd;AACA,cAAU,MAAM,MAAN,CAAa,EAAb,EAAiB,OAAjB,EAA0B,EAAC,MAAM,MAAP,EAAe,WAAW,GAA1B,EAA1B,CAAV;AACA,SAAK,KAAL,CAAW,IAAX,EAAiB,EAAjB,EAAqB,OAArB,EAA8B,IAA9B,CAAmC,mBAAW;AAC5C,gBAAU,QAAQ,OAAR,CAAgB,eAAhB,EAAiC,OAAjC,CAAV;AACA,aAAK,IAAL,CAAU,QAAQ,YAAlB;AACA,aAAK,GAAL,CAAS,OAAT;AACD,KAJD;AAKD,G;;;;;;;mBAKD,U,yBAAY;AACV,WAAO,KAAK,YAAL,CAAkB,GAAlB,CAAP;AACD,G;;;;;;;mBAKD,U,yBAAY;AACV,WAAO,KAAK,YAAL,CAAkB,GAAlB,CAAP;AACD,G;;;;;;;mBAKD,U,yBAAY;AACV,WAAO,KAAK,YAAL,CAAkB,GAAlB,CAAP;AACD,G;;;;;;;mBAKD,U,yBAAY;AACV,WAAO,KAAK,YAAL,CAAkB,GAAlB,CAAP;AACD,G;;;;;;;mBAKD,U,yBAAY;AACV,WAAO,KAAK,YAAL,CAAkB,GAAlB,CAAP;AACD,G;;;EAvE0B,MAAM,UAAN,CAAiB,I",
    "file": "../../../src/common/controller/error.js",
    "sourcesContent": [
        "'use strict';\n/**\n * error controller\n */\nexport default class extends think.controller.base {\n  /**\n   * display error page\n   * @param  {Number} status []\n   * @return {Promise}        []\n   */\n  displayError(status){\n\n    //hide error message on production env\n    if(think.env === 'production'){\n      this.http.error = null;\n    }\n\n    let errorConfig = this.config('error');\n    let message = this.http.error && this.http.error.message || '';\n    if(this.isJsonp()){\n      return this.jsonp({\n        [errorConfig.key]: status,\n        [errorConfig.msg]: message\n      })\n    }else if(this.isAjax()){\n      return this.fail(status, message);\n    }\n\n    let module = 'common';\n    if(think.mode !== think.mode_module){\n      module = this.config('default_module');\n    }\n    let file = `${module}/error/${status}.html`;\n    let options = this.config('tpl');\n    options = think.extend({}, options, {type: 'base', file_depr: '_'});\n    this.fetch(file, {}, options).then(content => {\n      content = content.replace('ERROR_MESSAGE', message);\n      this.type(options.content_type);\n      this.end(content);\n    });\n  }\n  /**\n   * Bad Request \n   * @return {Promise} []\n   */\n  _400Action(){\n    return this.displayError(400);\n  }\n  /**\n   * Forbidden \n   * @return {Promise} []\n   */\n  _403Action(){\n    return this.displayError(403);\n  }\n  /**\n   * Not Found \n   * @return {Promise}      []\n   */\n  _404Action(){\n    return this.displayError(404);\n  }\n  /**\n   * Internal Server Error\n   * @return {Promise}      []\n   */\n  _500Action(){\n    return this.displayError(500);\n  }\n  /**\n   * Service Unavailable\n   * @return {Promise}      []\n   */\n  _503Action(){\n    return this.displayError(503);\n  }\n}"
    ]
}